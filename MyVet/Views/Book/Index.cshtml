@using Common.Utils.Enums
@using static Common.Utils.Constant.Const
@{
    ViewData["Title"] = "Libros";

    var idRols = User.Claims.FirstOrDefault(x => x.Type == TypeClaims.IdRol).Value;
    bool isAdmin = idRols.Any(x => x.ToString() == Convert.ToInt32(Enums.Rol.Administrador).ToString());
    bool isEstand = idRols.Any(x => x.ToString() == Convert.ToInt32(Enums.Rol.Estandar).ToString());
}


<div class="row justify-content-center">
    <div class="text-center">
        <h1>Listado de Libros</h1>
    </div>
</div>


@if (isAdmin || isEstand)
{
    <div class="row mb-2">
        <button id="nuevoLibro" title="Nuevo Libro" class="btn btn-primary" onclick="nuevaLibro()"><i class="fas fa-book"></i> Nuevo Libro</button>
    </div>
}

<div class="row">
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Fecha de Ingreso</th>
                <th scope="col">Nombre</th>
                <th scope="col">Editorial</th>
                <th scope="col">Autor</th>
                <th scope="col">Tipo Libro</th>
                <th scope="col">Estado</th>
                <th scope="col">Descripcion</th>
                <th scope="col">Opciones</th>
            </tr>
        </thead>
        @* Cuerpo de la tabla *@
        <tbody id="cuerpoBooks"></tbody>
    </table>

    <div class="modal fade" id="modalBooks" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title font-weight-bold" id="idTituloModalBooks"></h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="row">
                            <div class="col-md-6 form-group">
                                <label for="txtDates" class="col-form-label">Fecha</label>
                                <input placeholder="Ingrese una fecha" type="date" class="form-control" id="txtDates" required>
                            </div>

                            <div class="col-md-6 form-group">
                                <label for="txtNombre" class="col-form-label">Nombre</label>
                                <input placeholder="Ingrese un nombre" type="text" class="form-control" id="txtNombre" required>
                            </div>
                        </div>

                        <div class="row">

                            <div class="col-md-6 form-group">
                                <label for="cmbEditorial" class="col-form-label">Editorial</label>
                                <select type="text" class="form-control" id="cmbEditorial" onchange="selectEditorial()" required>
                                    <option>Seleccionar</option>
                                </select>
                            </div>

                            <div class="col-md-6 form-group">
                                <label for="cmbAutor" class="col-form-label">Autor</label>
                                <select type="text" class="form-control" id="cmbAutor" onchange="selectAutor()" required>
                                    <option>Seleccionar</option>
                                </select>
                            </div>

                        </div>

                        <div class="row">

                            <div class="col-md-6 form-group">
                                <label for="cmbTypeBook" class="col-form-label">Tipo Libro</label>
                                <select type="text" class="form-control" id="cmbTypeBook" onchange="selectTipoLibro()" required>
                                    <option>Seleccionar</option>
                                </select>
                            </div>

                            <div class="col-md-6 form-group">
                                <label for="cmbEstado" class="col-form-label">Estado</label>
                                <select type="text" class="form-control" id="cmbEstado" onchange="selectEstado()" required>
                                    <option>Seleccionar</option>
                                </select>
                            </div>

                        </div>

                        <div class="row">
                            <div class="col-md-12 form-group">
                                <label for="txtDescripcion" class="col-form-label">Descripcion</label>
                                <textarea class="form-control"
                                          id="txtDescripcion"
                                          required
                                          placeholder="Descripción del Libro"
                                          maxlength="300">

                                </textarea>
                            </div>
                        </div>

                    </form>
                </div>
                <div class="modal-footer">
                    <button title="Cancelar" type="button" class="btn btn-danger" data-dismiss="modal"><i class="far fa-window-close"></i> Cancelar</button>
                    <button title="Guardar" type="button" class="btn btn-success" onclick="guardarLibro()"><i class="far fa-save"></i> Guardar</button>
                </div>
            </div>
        </div>
    </div>
    <!--end modal-->
</div>

@section Scripts{

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script type="text/javascript" charset="utf-8">

        var listBooks = [];
        var listEditorial = [];
        var listAuthor = [];
        var listTypeBook = [];
        var listState = [];

        let idBook = '';
        let idEditorial = '';
        let idAuthor = '';
        let idTypeBook = '';
        let idState = '';
        let idAuthorBook = '';

        //El documents ready funcion es donde ponemos todas nuestras funciones para que se ejecuten.
        $(document).ready(function () {
            getAllBooks();
            getAllEditorial();
            getAllAuthors();
            getAllTypeBook();
            getAllState();
        });

        function getAllBooks() {
            modalProcesando(true);
                $.ajax({
                    url: '@Url.Action("GetAllBooks", "Book")',
                    method: 'GET',
                    dataType: "json",
                    success: function (data) {
                        modalProcesando(false);
                        listBooks = data.result;
                        console.log(listBooks);
                        cargarGridBooks(listBooks);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                            modalProcesando(false);
                            console.error(xhr, textStatus, errorThrown);
                        }
                });
        }

        function getAllEditorial() {
            modalProcesando(true);
                $.ajax({
                    url: '@Url.Action("GetAllEditorial", "Editorial")',
                    method: 'GET',
                    dataType: "json",
                    success: function (data) {
                        modalProcesando(false);
                        listEditorial = data.result;
                        cargarEditorial(listEditorial);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                            modalProcesando(false);
                            console.error(xhr, textStatus, errorThrown);
                        }
                });
        }

        function getAllAuthors() {
            modalProcesando(true);
                $.ajax({
                    url: '@Url.Action("GetAllAuthors", "Author")',
                    method: 'GET',
                    dataType: "json",
                    success: function (data) {
                        modalProcesando(false);
                        listAuthor = data.result;
                        cargarAutores(listAuthor);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        modalProcesando(false);
                        console.error(xhr, textStatus, errorThrown);
                    }
                });
        }

        function getAllTypeBook() {
            modalProcesando(true);
                $.ajax({
                    url: '@Url.Action("GetAllTypeBook", "Book")',
                    method: 'GET',
                    dataType: "json",
                    success: function (data) {
                        modalProcesando(false);
                        listTypeBook = data.result;
                        cargarTiposLibros(listTypeBook);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        modalProcesando(false);
                        console.error(xhr, textStatus, errorThrown);
                    }
                });
    }

        function getAllState() {
            modalProcesando(true);
                $.ajax({
                    url: '@Url.Action("GetAllState", "Book")',
                    method: 'GET',
                    dataType: "json",
                    success: function (data) {
                        modalProcesando(false);
                        listState = data.result;
                        cargarEstados(listState);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        modalProcesando(false);
                        console.error(xhr, textStatus, errorThrown);
                    }
                });
        }

        function cargarGridBooks(data) {
            $("#cuerpoBooks").html("");
            console.log(data);
            for (i = 0; i < data.length; i++) {
                var tr = `
                <tr>
                    <td>`+ data[i].strDateRelease + `</td>
                    <td>`+ data[i].name + `</td>
                    <td>`+ data[i].nameEditorial + `</td>
                    <td>`+ data[i].nameAuthor +' '+data[i].lastNameAuthor + `</td>
                    <td>`+ data[i].nameTypeBook + `</td>
                    <td>`+ data[i].nameState + `</td>
                    <td>`+ data[i].description + `</td>

                    <td>
                        <button title="Editar" class="btn btn-warning" onclick="editarBook(`+ data[i].idBook + `)"><i class="fas fa-edit"></i><em> Editar</em></button>
                        <button title="Eliminar" class="btn btn-danger" onclick="eliminarBook(`+ data[i].idBook + `)"><i class="far fa-trash-alt"></i><em> Eliminar</em></button>
                    </td>
                </tr>
            `;
                $("#cuerpoBooks").append(tr);
            }
    }

        function cargarEditorial(data, selected) {
            $("#cmbEditorial").empty();
            $("#cmbEditorial").append('<option value="" disabled selected>Seleccione la editorial</option>');
            $.each(data, function (i, lista) {
                if (data[i].idEditorial == selected) {
                    $("#cmbEditorial").append('<option value="' + data[i].idEditorial + '"selected>' + data[i].editorial + '</option>');
                }
                else {
                    $("#cmbEditorial").append('<option value="' + data[i].idEditorial + '">' + data[i].editorial + '</option>');
                }
            });
        }

        function cargarAutores(data, selected) {
            $("#cmbAutor").empty();
            $("#cmbAutor").append('<option value="" disabled selected>Seleccione la editorial</option>');
                $.each(data, function (i, lista) {
                    if (data[i].idAuthor == selected) {
                        $("#cmbAutor").append('<option value="' + data[i].idAuthor + '"selected>' + data[i].nameAuthor + ' ' + data[i].lastNameAuthor +'</option>');
                    }
                    else {
                        $("#cmbAutor").append('<option value="' + data[i].idAuthor + '">' + data[i].nameAuthor + ' ' + data[i].lastNameAuthor + '</option>');
                    }
                });
        }

        function cargarTiposLibros(data, selected) {
            $("#cmbTypeBook").empty();
            $("#cmbTypeBook").append('<option value="" disabled selected>Seleccione el tipo de libro</option>');
            $.each(data, function (i, lista) {
                if (data[i].idTypeBook == selected) {
                    $("#cmbTypeBook").append('<option value="' + data[i].idTypeBook + '"selected>' + data[i].typeBook + '</option>');
                }
                else {
                    $("#cmbTypeBook").append('<option value="' + data[i].idTypeBook + '">' + data[i].typeBook +'</option>');
                }
            });
    }

        function cargarEstados(data, selected) {
            $("#cmbEstado").empty();
            $("#cmbEstado").append('<option value="" disabled selected>Seleccione el estado</option>');
            $.each(data, function (i, lista) {
                if (data[i].idState == selected) {
                    $("#cmbEstado").append('<option value="' + data[i].idState + '"selected>' + data[i].state + '</option>');
                }
                else {
                    $("#cmbEstado").append('<option value="' + data[i].idState + '">' + data[i].state + '</option>');
                }
            });
    }

        function guardarLibro() {

            if (validarForm()) {

                let parametro = {
                    DateRelease: $("#txtDates").val(),
                    Name: $("#txtNombre").val(),
                    IdEditorial: idEditorial,
                    IdAuthor: idAuthor,
                    IdTypeBook: idTypeBook,
                    IdState: idState,
                    IdAuthorBook: idAuthorBook,
                    Description: $("#txtDescripcion").val()
                }
                if (idBook == '') {
                    modalProcesando(true);
                    $.ajax({
                        url: '@Url.Action("InsertBooks", "Book")',
                        method: 'POST',
                        dataType: "json",
                        data: parametro,
                        success: function (data) {
                            modalProcesando(false);
                            if (data) {
                                $('#modalBooks').modal('hide');
                                toastMessage('success', 'Libro guardado Exitosamente!');
                                getAllBooks();
                                limpiarForm();
                            } else {
                                toastMessage('error', 'Hubo un error al guardar, por favor intentarlo nuevamente!');
                            }
                        },
                        error: function (xhr, textStatus, errorThrown) {
                            modalProcesando(false);
                            toastMessage('error', 'Hubo un error al guardar, por favor intentarlo nuevamente!');
                            console.error(xhr, textStatus, errorThrown);
                        }
                    });
                } else {
                    parametro.idAuthorBook = idAuthorBook;
                    parametro.idBook = idBook;
                    modalProcesando(true);
                    $.ajax({
                        url: '@Url.Action("UpdateBooks", "Book")',
                        method: 'PUT',
                        data: parametro,
                        dataType: "json",
                        success: function (data) {
                            modalProcesando(false);

                            if (data) {
                                $('#modalBooks').modal('hide'); //=>hide: Ocultar
                                limpiarForm();
                                toastMessage('success', 'Libro actualizado exitosamente!');
                                getAllBooks();
                            } else {
                                toastMessage('error', 'Hubo un error al guardar, por favor intentarlo nuevamente!');
                            }
                        },
                        error: function (xhr, textStatus, errorThrown) {
                            modalProcesando(false);
                            toastMessage('error', 'Hubo un error al guardar, por favor intentarlo nuevamente!');
                            console.error(xhr, textStatus, errorThrown);
                        }
                    });
                }
            }
        }

        function validarForm() {

        if (idBook == '') {
            var now = new Date();
            var day = ("0" + now.getDate()).slice(-2);
            var month = ("0" + (now.getMonth() + 1)).slice(-2);
            var today = now.getFullYear() + "-" + (month) + "-" + (day);

            if ($("#txtDates").val() > '0-0-0' && $("#txtDates").val() < today) {
                $("#txtDates").focus();
                toastMessage('warning', 'La fecha es inferior a la fecha actual, por favor ingrese una fecha superior!');
                return false;
            } else if ($("#txtDates").val() == '') {
                $("#txtDates").focus();
                toastMessage('warning', 'La fecha de ingreso del libro es obligatoria!');
                return false;
            }

        }

        if ($("#txtNombre").val() == '') {
            $("#txtNombre").focus();
            toastMessage('warning', 'El nombre es obligatorio!');
            return false;
        }

        if (idEditorial == '') {
            $("#cmbEditorial").focus();
            toastMessage('warning', 'La selección de la editorial es obligatoria!');
            return false;
        }

        if (idAuthor == '') {
            $("#cmbAutor").focus();
            toastMessage('warning', 'La selección del autor es obligatorio!');
            return false;
            }

        if (idTypeBook == '') {
            $("#cmbTypeBook").focus();
            toastMessage('warning', 'La selección del tipo de libro es obligatoria!');
            return false;
            }

        if (idState == '') {
            $("#cmbEstado").focus();
            toastMessage('warning', 'La selección del estado es obligatoria!');
            return false;
        }

        if ($("#txtDescripcion").val() == '') {
            $("#txtDescripcion").focus();
            toastMessage('warning', 'La descripción es obligatoria!');
            return false;
        }

        return true;
    }

        function limpiarForm() {
            $("#txtDates").val('');
            $("#txtNombre").val('');
            $("#txtDescripcion").val('');
            idBook = '';
            idEditorial = '';
            idAuthor = '';
            idTypeBook = '';
            idState = '';
            idAuthorBook = '';

            cargarEditorial(listEditorial);
            cargarAutores(listAuthor);
            cargarTiposLibros(listTypeBook);
            cargarEstados(listState);
        }

        //Ligado al onchange
        function selectEditorial() {
            var combo = document.getElementById("cmbEditorial");
            let selected = combo.options[combo.selectedIndex].value;
            idEditorial = selected;
        }

        //Ligado al onchange
        function selectAutor() {
            var combo = document.getElementById("cmbAutor");
            let selected = combo.options[combo.selectedIndex].value;
            idAuthor = selected;
        }

        //Ligado al onchange
        function selectTipoLibro() {
            var combo = document.getElementById("cmbTypeBook");
            let selected = combo.options[combo.selectedIndex].value;
            idTypeBook = selected;
        }

        //Ligado al onchange
        function selectEstado() {
            var combo = document.getElementById("cmbEstado");
            let selected = combo.options[combo.selectedIndex].value;
            idState = selected;
        }

        //Boton Nuevo Libro
        function nuevaLibro() {

            document.getElementById('txtDates').disabled = false;

            if (listEditorial.length == 0) {
                getAllEditorial();
            }

            if (listAuthor.length == 0) {
                getAllAuthors();
            }

            if (listTypeBook.length == 0) {
                getAllTypeBook();
            }

            if (listState.length == 0) {
                getAllState();
            }

            $('#idTituloModalBooks').html("Ingresar Nuevo Libro");
            $('#modalBooks').modal({ keyboard: true });
            limpiarForm();
    }

        function editarBook(id) {
            idBook = id;
            let books = listBooks.find(x => x.idBook == idBook);
            idEditorial = books.idEditorial;
            idAuthor = books.idAuthor;
            idTypeBook = books.idTypeBook;
            idState = books.idState;
            idAuthorBook = books.idAuthorBook;
            $('#txtNombre').val(books.name);

            //setear fechas
            var now = new Date(books.dateRelease);
            console.log(books.dateRelease);
            var day = ("0" + now.getDate()).slice(-2);
            var month = ("0" + (now.getMonth() + 1)).slice(-2);
            var today = now.getFullYear() + "-" + (month) + "-" + (day);
            $('#txtDates').val(today);
            document.getElementById('txtDates').disabled = true;

            $('#txtDescripcion').val(books.description);

            cargarEditorial(listEditorial, books.idEditorial);
            cargarAutores(listAuthor, books.idAuthor);
            cargarTiposLibros(listTypeBook, books.idTypeBook);
            cargarEstados(listState, books.idState);

            $('#idTituloModalBooks').html("Editar Libro");
            $('#modalBooks').modal({ keyboard: true });
    }

        function eliminarBook(idBook) {
            console.log("mándo a eliminar", idBook);

                Swal.fire({
                    title: 'Desea eliminar el elemento?',
                    text: "No podrás revertir esto!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Si, eliminar!',
                    cancelButtonText: 'Cancerlar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        modalProcesando(true);
                        $.ajax({
                            url: '@Url.Action("DeleteBooks", "Book")',
                            method: 'DELETE',
                            data: {
                                idBook: idBook
                            },
                            dataType: "json",
                            success: function (data) {
                                modalProcesando(false);
                                if (data.isSuccess) {
                                    listBooks = listBooks.filter(x => x.idBook != idBook);
                                    cargarGridBooks(listBooks);
                                    Swal.fire(
                                        'Eliminado!',
                                        data.message,
                                        'success'
                                    );
                                } else {
                                    Swal.fire(
                                        'Error!',
                                        data.message,
                                        'error'
                                    );
                                }
                            },
                            error: function (xhr, textStatus, errorThrown) {
                                modalProcesando(false);
                                console.error(xhr, textStatus, errorThrown);
                            }
                        });
                    }
                });
        }

    </script>
}